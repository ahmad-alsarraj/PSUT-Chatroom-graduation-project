{"ast":null,"code":"import axiosConfiguration from \"./axiosConfiguration\";\nvar axios = axiosConfiguration(\"\");\nexport var PSUT_ChatroomApi = {\n  createGroup: function createGroup(name) {\n    return axios.post(\"Group/Create\", {\n      name: name\n    });\n  },\n  updateGroup: function updateGroup(id, name) {\n    return axios.patch(\"Group/Update\", {\n      name: name,\n      id: id\n    });\n  },\n  deleteGroup: function deleteGroup(ids) {\n    return axios.delete(\"Group/Delete\", {\n      data: ids\n    });\n  },\n  removeMember: function removeMember(dto) {\n    return axios.delete(\"GroupMember/DeleteOne\", {\n      data: dto\n    });\n  },\n  addMember: function addMember(dto) {\n    return axios.post(\"GroupMember/Create\", dto);\n  },\n  getNonExistingMembers: function getNonExistingMembers(groupId) {\n    return axios.get(\"GroupMember/GetStudentsNotInGroup/\" + groupId);\n  },\n  getGroups: function getGroups() {\n    return axios.post(\"Group/GetGroups\", {\n      offset: 0,\n      count: 100\n    });\n  },\n  GetMessagesInConversation: function GetMessagesInConversation(conversationId) {\n    return axios.post(\"Message/GetMessagesInConversation\", {\n      conversationId: conversationId,\n      offset: 0,\n      count: 999\n    });\n  },\n  sendMessage: function sendMessage(msg) {\n    return axios.post(\"Message/Create\", msg);\n  },\n  sendPing: function sendPing(msg) {\n    return axios.post(\"Ping/Create\", msg);\n  },\n  createBackup: function createBackup() {\n    return axios.post(\"Admin/CreateBackup\");\n  },\n  patchDatabase: function patchDatabase() {\n    return axios.post(\"Admin/PatchDb\");\n  },\n  clearDatabase: function clearDatabase() {\n    return axios.post(\"Admin/ClearDb\");\n  }\n};\nexport var userRoute = {\n  LoginAuth: function LoginAuth(data) {\n    return axios.post(\"User/Login\", {\n      email: data.email,\n      googleToken: data.password\n    });\n  },\n  GetUser: function GetUser() {\n    return axios.post(\"User/GetLoggedIn\");\n  },\n  Logout: function Logout() {\n    return axios.post(\"User/Logout\");\n  }\n};","map":{"version":3,"sources":["C:/Users/Ahmed/Desktop/UniChat/Mobile/api/routeApi.js"],"names":["axiosConfiguration","axios","PSUT_ChatroomApi","createGroup","name","post","updateGroup","id","patch","deleteGroup","ids","delete","data","removeMember","dto","addMember","getNonExistingMembers","groupId","get","getGroups","offset","count","GetMessagesInConversation","conversationId","sendMessage","msg","sendPing","createBackup","patchDatabase","clearDatabase","userRoute","LoginAuth","email","googleToken","password","GetUser","Logout"],"mappings":"AAAA,OAAOA,kBAAP;AAEA,IAAMC,KAAK,GAAGD,kBAAkB,CAAC,EAAD,CAAhC;AAEA,OAAO,IAAME,UAAU,GAAG;AACxBC,EAAAA,WAAW,EAAE,qBAACC,IAAD;AAAA,WAAUH,KAAK,CAACI,IAAN,CAAW,cAAX,EAA2B;AAAED,MAAAA,IAAI,EAAJA;AAAF,KAA3B,CAAV;AAAA,GADW;AAExBE,EAAAA,WAAW,EAAE,qBAACC,EAAD,EAAKH,IAAL;AAAA,WAAcH,KAAK,CAACO,KAAN,CAAY,cAAZ,EAA4B;AAAEJ,MAAAA,IAAI,EAAJA,IAAF;AAAQG,MAAAA,EAAE,EAAFA;AAAR,KAA5B,CAAd;AAAA,GAFW;AAGxBE,EAAAA,WAAW,EAAE,qBAACC,GAAD;AAAA,WAAST,KAAK,CAACU,MAAN,CAAa,cAAb,EAA6B;AAAEC,MAAAA,IAAI,EAAEF;AAAR,KAA7B,CAAT;AAAA,GAHW;AAIxBG,EAAAA,YAAY,EAAE,sBAACC,GAAD;AAAA,WAASb,KAAK,CAACU,MAAN,CAAa,uBAAb,EAAsC;AAAEC,MAAAA,IAAI,EAAEE;AAAR,KAAtC,CAAT;AAAA,GAJU;AAKxBC,EAAAA,SAAS,EAAE,mBAACD,GAAD;AAAA,WAASb,KAAK,CAACI,IAAN,CAAW,oBAAX,EAAiCS,GAAjC,CAAT;AAAA,GALa;AAMxBE,EAAAA,qBAAqB,EAAE,+BAACC,OAAD;AAAA,WACrBhB,KAAK,CAACiB,GAAN,wCAA+CD,OAA/C,CADqB;AAAA,GANC;AAQxBE,EAAAA,SAAS,EAAE;AAAA,WACTlB,KAAK,CAACI,IAAN,CAAW,iBAAX,EAA8B;AAC5Be,MAAAA,MAAM,EAAE,CADoB;AAE5BC,MAAAA,KAAK,EAAE;AAFqB,KAA9B,CADS;AAAA,GARa;AAaxBC,EAAAA,yBAAyB,EAAE,mCAACC,cAAD;AAAA,WACzBtB,KAAK,CAACI,IAAN,CAAW,mCAAX,EAAgD;AAC9CkB,MAAAA,cAAc,EAAdA,cAD8C;AAE9CH,MAAAA,MAAM,EAAE,CAFsC;AAG9CC,MAAAA,KAAK,EAAE;AAHuC,KAAhD,CADyB;AAAA,GAbH;AAmBxBG,EAAAA,WAAW,EAAE,qBAACC,GAAD;AAAA,WAASxB,KAAK,CAACI,IAAN,CAAW,gBAAX,EAA6BoB,GAA7B,CAAT;AAAA,GAnBW;AAoBxBC,EAAAA,QAAQ,EAAE,kBAACD,GAAD;AAAA,WAASxB,KAAK,CAACI,IAAN,CAAW,aAAX,EAA0BoB,GAA1B,CAAT;AAAA,GApBc;AAqBxBE,EAAAA,YAAY,EAAE;AAAA,WAAM1B,KAAK,CAACI,IAAN,CAAW,oBAAX,CAAN;AAAA,GArBU;AAsBxBuB,EAAAA,aAAa,EAAE;AAAA,WAAM3B,KAAK,CAACI,IAAN,CAAW,eAAX,CAAN;AAAA,GAtBS;AAuBxBwB,EAAAA,aAAa,EAAE;AAAA,WAAM5B,KAAK,CAACI,IAAN,CAAW,eAAX,CAAN;AAAA;AAvBS,CAAnB;AA0BP,OAAO,IAAMyB,SAAS,GAAG;AACvBC,EAAAA,SAAS,EAAE,mBAACnB,IAAD;AAAA,WACTX,KAAK,CAACI,IAAN,eAAyB;AAKvB2B,MAAAA,KAAK,EAAEpB,IAAI,CAACoB,KALW;AAMvBC,MAAAA,WAAW,EAAErB,IAAI,CAACsB;AANK,KAAzB,CADS;AAAA,GADY;AAUvBC,EAAAA,OAAO,EAAE;AAAA,WAAMlC,KAAK,CAACI,IAAN,CAAW,kBAAX,CAAN;AAAA,GAVc;AAWvB+B,EAAAA,MAAM,EAAE;AAAA,WAAMnC,KAAK,CAACI,IAAN,CAAW,aAAX,CAAN;AAAA;AAXe,CAAlB","sourcesContent":["import axiosConfiguration from \"./axiosConfiguration\";\n\nconst axios = axiosConfiguration(\"\");\n\nexport const PSUT_ChatroomApi = {\n  createGroup: (name) => axios.post(\"Group/Create\", { name }),\n  updateGroup: (id, name) => axios.patch(\"Group/Update\", { name, id }),\n  deleteGroup: (ids) => axios.delete(\"Group/Delete\", { data: ids }),\n  removeMember: (dto) => axios.delete(\"GroupMember/DeleteOne\", { data: dto }),\n  addMember: (dto) => axios.post(\"GroupMember/Create\", dto),\n  getNonExistingMembers: (groupId) =>\n    axios.get(`GroupMember/GetStudentsNotInGroup/${groupId}`),\n  getGroups: () =>\n    axios.post(\"Group/GetGroups\", {\n      offset: 0,\n      count: 100,\n    }),\n  GetMessagesInConversation: (conversationId) =>\n    axios.post(\"Message/GetMessagesInConversation\", {\n      conversationId,\n      offset: 0,\n      count: 999,\n    }),\n  sendMessage: (msg) => axios.post(\"Message/Create\", msg),\n  sendPing: (msg) => axios.post(\"Ping/Create\", msg),\n  createBackup: () => axios.post(\"Admin/CreateBackup\"),\n  patchDatabase: () => axios.post(\"Admin/PatchDb\"),\n  clearDatabase: () => axios.post(\"Admin/ClearDb\"),\n};\n\nexport const userRoute = {\n  LoginAuth: (data) =>\n    axios.post(`User/Login`, {\n      //user email: \"abd20170112@std.psut.edu.jo\",\n      //inst email: \"i@std.psut.edu.jo\",\n      //admin email: \"b@std.psut.edu.jo\",\n      // default password for all \"12534154545\"\n      email: data.email,\n      googleToken: data.password,\n    }),\n  GetUser: () => axios.post(\"User/GetLoggedIn\"),\n  Logout: () => axios.post(\"User/Logout\"),\n};\n"]},"metadata":{},"sourceType":"module"}