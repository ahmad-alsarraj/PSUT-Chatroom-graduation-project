{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button, Modal, Portal, Text } from \"react-native-paper\";\nimport { PSUT_ChatroomApi } from \"../api/routeApi\";\nimport LoadingScreen from \"../componnetns/LoadingScreen\";\nimport { Cache } from \"../helpers/cache\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ManageScreen = function ManageScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      backupFileName = _useState4[0],\n      setBackupFileName = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var onBackup = function onBackup() {\n    var name, _e$response;\n\n    return _regeneratorRuntime.async(function onBackup$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(PSUT_ChatroomApi.createBackup());\n\n          case 4:\n            name = _context.sent;\n            console.log(name.data);\n            setLoading(false);\n            setBackupFileName(name.data);\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            setLoading(false);\n            if ((_context.t0 == null ? void 0 : (_e$response = _context.t0.response) == null ? void 0 : _e$response.status) === 403) alert(\"You don't have permission to create backup\");else alert(\"Failed to create the backup\");\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 10]], Promise);\n  };\n\n  var onPatch = function onPatch() {\n    var _e$response2;\n\n    return _regeneratorRuntime.async(function onPatch$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoading(true);\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(PSUT_ChatroomApi.patchDatabase());\n\n          case 4:\n            setLoading(false);\n            alert(\"Patched Successfully\");\n            _context2.next = 12;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](1);\n            setLoading(false);\n            if ((_context2.t0 == null ? void 0 : (_e$response2 = _context2.t0.response) == null ? void 0 : _e$response2.status) === 403) alert(\"You don't have permission to patch the database\");else alert(\"Failed to patch the database\");\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n\n  var onClear = function onClear() {\n    var _e$response3;\n\n    return _regeneratorRuntime.async(function onClear$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            setModalVisible(false);\n            setLoading(true);\n            _context3.prev = 2;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(PSUT_ChatroomApi.clearDatabase());\n\n          case 5:\n            setLoading(false);\n            alert(\"Cleared Successfully\");\n            _context3.next = 13;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](2);\n            setLoading(false);\n            if ((_context3.t0 == null ? void 0 : (_e$response3 = _context3.t0.response) == null ? void 0 : _e$response3.status) === 403) alert(\"You don't have permission to clear the database\");else alert(\"Failed to clear the database\");\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[2, 9]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Portal, {\n      children: _jsx(Modal, {\n        visible: modalVisible,\n        onDismiss: function onDismiss() {\n          return setModalVisible(false);\n        },\n        children: _jsxs(View, {\n          style: styles.modal_ClearDbWarning,\n          children: [_jsx(Text, {\n            style: {\n              fontSize: 16,\n              textAlign: \"center\"\n            },\n            children: \"Are you sure you want to continue?\"\n          }), _jsx(Text, {\n            style: {\n              fontSize: 16,\n              textAlign: \"center\"\n            },\n            children: \"This action cannot be undone!\"\n          }), _jsxs(View, {\n            style: styles.modal_btnsContainer,\n            children: [_jsx(Button, {\n              color: \"crimson\",\n              onPress: function onPress() {\n                return onClear();\n              },\n              children: \"Delete, All\"\n            }), _jsx(Button, {\n              onPress: function onPress() {\n                return setModalVisible(false);\n              },\n              children: \"Cancel\"\n            })]\n          })]\n        })\n      })\n    }), _jsx(Portal, {\n      children: _jsx(Modal, {\n        visible: !!backupFileName,\n        onDismiss: function onDismiss() {\n          return setBackupFileName(\"\");\n        },\n        children: _jsxs(View, {\n          style: styles.modal_ClearDbWarning,\n          children: [_jsx(Text, {\n            style: {\n              fontSize: 16,\n              textAlign: \"center\"\n            },\n            children: \"Database backup completed successfully\"\n          }), _jsxs(Text, {\n            style: {\n              fontSize: 16,\n              marginTop: 6,\n              textAlign: \"center\",\n              color: \"crimson\"\n            },\n            children: [\"FILE: \", backupFileName]\n          }), _jsx(View, {\n            style: styles.modal_btnsContainer,\n            children: _jsx(Button, {\n              style: {\n                width: \"100%\"\n              },\n              onPress: function onPress() {\n                return setBackupFileName(\"\");\n              },\n              children: \"OK\"\n            })\n          })]\n        })\n      })\n    }), _jsx(LoadingScreen, {\n      visible: loading\n    }), _jsx(Text, {\n      style: styles.title,\n      children: \"SYSTEM ADMINISTRATION\"\n    }), _jsxs(View, {\n      children: [_jsx(Button, {\n        onPress: function onPress() {\n          return onBackup();\n        },\n        style: styles.btn,\n        mode: \"contained\",\n        children: \"Create Database Backup\"\n      }), _jsx(Button, {\n        onPress: function onPress() {\n          return onPatch();\n        },\n        style: styles.btn,\n        mode: \"contained\",\n        children: \"Patch Database\"\n      }), _jsx(Button, {\n        onPress: function onPress() {\n          return setModalVisible(true);\n        },\n        color: \"#cc0000\",\n        style: styles.btn,\n        mode: \"contained\",\n        children: \"Clear Database\"\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    paddingVertical: 36,\n    paddingHorizontal: 30\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 14\n  },\n  btn: {\n    padding: 10,\n    marginTop: 20\n  },\n  modal_ClearDbWarning: {\n    backgroundColor: \"white\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 15,\n    paddingTop: 20,\n    margin: 15,\n    borderRadius: 6\n  },\n  modal_btnsContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginTop: 20\n  }\n});\nexport default ManageScreen;","map":{"version":3,"sources":["C:/Users/Ahmed/Desktop/UniChat/Mobile/screen/ManageScreen.js"],"names":["React","useState","Button","Modal","Portal","Text","PSUT_ChatroomApi","LoadingScreen","Cache","ManageScreen","modalVisible","setModalVisible","backupFileName","setBackupFileName","loading","setLoading","onBackup","createBackup","name","console","log","data","response","status","alert","onPatch","patchDatabase","onClear","clearDatabase","styles","container","modal_ClearDbWarning","fontSize","textAlign","modal_btnsContainer","marginTop","color","width","title","btn","StyleSheet","create","alignItems","paddingVertical","paddingHorizontal","marginBottom","padding","backgroundColor","justifyContent","paddingTop","margin","borderRadius","flexDirection"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { Button, Modal, Portal, Text } from \"react-native-paper\";\nimport { PSUT_ChatroomApi } from \"../api/routeApi\";\nimport LoadingScreen from \"../componnetns/LoadingScreen\";\nimport { Cache } from \"../helpers/cache\";\n\nconst ManageScreen = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [backupFileName, setBackupFileName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const onBackup = async () => {\n    setLoading(true);\n\n    try {\n      const name = await PSUT_ChatroomApi.createBackup();\n      console.log(name.data);\n      setLoading(false);\n      setBackupFileName(name.data);\n    } catch (e) {\n      setLoading(false);\n      if (e?.response?.status === 403)\n        alert(\"You don't have permission to create backup\");\n      else alert(\"Failed to create the backup\");\n    }\n  };\n\n  const onPatch = async () => {\n    setLoading(true);\n    try {\n      await PSUT_ChatroomApi.patchDatabase();\n      setLoading(false);\n      alert(\"Patched Successfully\");\n    } catch (e) {\n      setLoading(false);\n      if (e?.response?.status === 403)\n        alert(\"You don't have permission to patch the database\");\n      else alert(\"Failed to patch the database\");\n    }\n  };\n\n  const onClear = async () => {\n    setModalVisible(false);\n    setLoading(true);\n\n    try {\n      await PSUT_ChatroomApi.clearDatabase();\n      setLoading(false);\n      alert(\"Cleared Successfully\");\n    } catch (e) {\n      setLoading(false);\n      if (e?.response?.status === 403)\n        alert(\"You don't have permission to clear the database\");\n      else alert(\"Failed to clear the database\");\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Portal>\n        <Modal visible={modalVisible} onDismiss={() => setModalVisible(false)}>\n          <View style={styles.modal_ClearDbWarning}>\n            <Text style={{ fontSize: 16, textAlign: \"center\" }}>\n              Are you sure you want to continue?\n            </Text>\n            <Text style={{ fontSize: 16, textAlign: \"center\" }}>\n              This action cannot be undone!\n            </Text>\n\n            <View style={styles.modal_btnsContainer}>\n              <Button color=\"crimson\" onPress={() => onClear()}>\n                Delete, All\n              </Button>\n              <Button onPress={() => setModalVisible(false)}>Cancel</Button>\n            </View>\n          </View>\n        </Modal>\n      </Portal>\n      <Portal>\n        <Modal\n          visible={!!backupFileName}\n          onDismiss={() => setBackupFileName(\"\")}\n        >\n          <View style={styles.modal_ClearDbWarning}>\n            <Text style={{ fontSize: 16, textAlign: \"center\" }}>\n              Database backup completed successfully\n            </Text>\n            <Text\n              style={{\n                fontSize: 16,\n                marginTop: 6,\n                textAlign: \"center\",\n                color: \"crimson\",\n              }}\n            >\n              FILE: {backupFileName}\n            </Text>\n            <View style={styles.modal_btnsContainer}>\n              <Button\n                style={{ width: \"100%\" }}\n                onPress={() => setBackupFileName(\"\")}\n              >\n                OK\n              </Button>\n            </View>\n          </View>\n        </Modal>\n      </Portal>\n      <LoadingScreen visible={loading} />\n      <Text style={styles.title}>SYSTEM ADMINISTRATION</Text>\n      <View>\n        <Button onPress={() => onBackup()} style={styles.btn} mode=\"contained\">\n          Create Database Backup\n        </Button>\n        <Button onPress={() => onPatch()} style={styles.btn} mode=\"contained\">\n          Patch Database\n        </Button>\n        <Button\n          onPress={() => setModalVisible(true)}\n          color=\"#cc0000\"\n          style={styles.btn}\n          mode=\"contained\"\n        >\n          Clear Database\n        </Button>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    paddingVertical: 36,\n    paddingHorizontal: 30,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 14,\n  },\n  btn: {\n    padding: 10,\n    marginTop: 20,\n  },\n  modal_ClearDbWarning: {\n    backgroundColor: \"white\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 15,\n    paddingTop: 20,\n    margin: 15,\n    borderRadius: 6,\n  },\n  modal_btnsContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginTop: 20,\n  },\n});\n\nexport default ManageScreen;\n"]},"metadata":{},"sourceType":"module"}