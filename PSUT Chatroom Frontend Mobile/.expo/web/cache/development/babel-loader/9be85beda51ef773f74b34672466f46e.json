{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ListMeassges = function ListMeassges(_ref) {\n  var _ref$item = _ref.item,\n      sender = _ref$item.sender,\n      isMe = _ref$item.isMe,\n      message = _ref$item.message,\n      sendingTime = _ref$item.sendingTime,\n      index = _ref.index;\n  return _jsx(View, {\n    children: _jsx(View, {\n      style: {\n        display: \"flex\",\n        flexDirection: isMe ? \"row-reverse\" : \"row\",\n        paddingHorizontal: 10,\n        paddingVertical: 5\n      },\n      children: _jsxs(View, {\n        style: {\n          backgroundColor: \"#128C7E\",\n          padding: 10,\n          borderRadius: 10\n        },\n        children: [_jsx(Text, {\n          style: {\n            flex: 1,\n            textAlign: isMe === 0 ? \"right\" : \"left\",\n            fontFamily: \"AppNormal\",\n            color: \"white\"\n          },\n          children: message\n        }), _jsxs(View, {\n          style: {\n            flex: 1,\n            flexDirection: \"row\",\n            minWidth: 65,\n            justifyContent: \"space-between\"\n          },\n          children: [_jsx(Text, {\n            style: {\n              flex: 1,\n              textAlign: \"left\",\n              fontFamily: \"AppNormal\",\n              fontSize: 12,\n              color: \"yellow\"\n            },\n            numberOfLines: 1,\n            children: isMe ? \"Me\" : sender\n          }), _jsx(Text, {\n            style: {\n              flex: 1,\n              textAlign: \"right\",\n              fontFamily: \"AppNormal\",\n              fontSize: 12,\n              color: \"yellow\"\n            },\n            children: sendingTime == null ? void 0 : sendingTime.split(\"T\")[1].split(\".\")[0]\n          })]\n        })]\n      })\n    })\n  });\n};\n\nexport default ListMeassges;","map":{"version":3,"sources":["C:/Users/Ahmed/Desktop/UniChat/Mobile/componnetns/ListMeassges.js"],"names":["React","ListMeassges","item","sender","isMe","message","sendingTime","index","display","flexDirection","paddingHorizontal","paddingVertical","backgroundColor","padding","borderRadius","flex","textAlign","fontFamily","color","minWidth","justifyContent","fontSize","split"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAGf;AAAA,uBAFJC,IAEI;AAAA,MAFIC,MAEJ,aAFIA,MAEJ;AAAA,MAFYC,IAEZ,aAFYA,IAEZ;AAAA,MAFkBC,OAElB,aAFkBA,OAElB;AAAA,MAF2BC,WAE3B,aAF2BA,WAE3B;AAAA,MADJC,KACI,QADJA,KACI;AACJ,SACE,KAAC,IAAD;AAAA,cACE,KAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,aAAa,EAAEL,IAAI,GAAG,aAAH,GAAmB,KAFjC;AAGLM,QAAAA,iBAAiB,EAAE,EAHd;AAILC,QAAAA,eAAe,EAAE;AAJZ,OADT;AAAA,gBAQE,MAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAE,SADZ;AAELC,UAAAA,OAAO,EAAE,EAFJ;AAGLC,UAAAA,YAAY,EAAE;AAHT,SADT;AAAA,mBAOE,KAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE,CADD;AAELC,YAAAA,SAAS,EAAEZ,IAAI,KAAK,CAAT,GAAa,OAAb,GAAuB,MAF7B;AAGLa,YAAAA,UAAU,EAAE,WAHP;AAILC,YAAAA,KAAK,EAAE;AAJF,WADT;AAAA,oBAQGb;AARH,UAPF,EAiBE,MAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLU,YAAAA,IAAI,EAAE,CADD;AAELN,YAAAA,aAAa,EAAE,KAFV;AAGLU,YAAAA,QAAQ,EAAE,EAHL;AAILC,YAAAA,cAAc,EAAE;AAJX,WADT;AAAA,qBAQE,KAAC,IAAD;AACE,YAAA,KAAK,EAAE;AACLL,cAAAA,IAAI,EAAE,CADD;AAELC,cAAAA,SAAS,EAAE,MAFN;AAGLC,cAAAA,UAAU,EAAE,WAHP;AAILI,cAAAA,QAAQ,EAAE,EAJL;AAKLH,cAAAA,KAAK,EAAE;AALF,aADT;AAQE,YAAA,aAAa,EAAE,CARjB;AAAA,sBAUGd,IAAI,GAAG,IAAH,GAAUD;AAVjB,YARF,EAoBE,KAAC,IAAD;AACE,YAAA,KAAK,EAAE;AACLY,cAAAA,IAAI,EAAE,CADD;AAELC,cAAAA,SAAS,EAAE,OAFN;AAGLC,cAAAA,UAAU,EAAE,WAHP;AAILI,cAAAA,QAAQ,EAAE,EAJL;AAKLH,cAAAA,KAAK,EAAE;AALF,aADT;AAAA,sBASGZ,WATH,oBASGA,WAAW,CAAEgB,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,EAA2BA,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC;AATH,YApBF;AAAA,UAjBF;AAAA;AARF;AADF,IADF;AA+DD,CAnED;;AAqEA,eAAerB,YAAf","sourcesContent":["import React from \"react\";\nimport { View, Text } from \"react-native\";\n\nconst ListMeassges = ({\n  item: { sender, isMe, message, sendingTime },\n  index,\n}) => {\n  return (\n    <View>\n      <View\n        style={{\n          display: \"flex\",\n          flexDirection: isMe ? \"row-reverse\" : \"row\",\n          paddingHorizontal: 10,\n          paddingVertical: 5,\n        }}\n      >\n        <View\n          style={{\n            backgroundColor: \"#128C7E\",\n            padding: 10,\n            borderRadius: 10,\n          }}\n        >\n          <Text\n            style={{\n              flex: 1,\n              textAlign: isMe === 0 ? \"right\" : \"left\",\n              fontFamily: \"AppNormal\",\n              color: \"white\",\n            }}\n          >\n            {message}\n          </Text>\n          <View\n            style={{\n              flex: 1,\n              flexDirection: \"row\",\n              minWidth: 65,\n              justifyContent: \"space-between\",\n            }}\n          >\n            <Text\n              style={{\n                flex: 1,\n                textAlign: \"left\",\n                fontFamily: \"AppNormal\",\n                fontSize: 12,\n                color: \"yellow\",\n              }}\n              numberOfLines={1}\n            >\n              {isMe ? \"Me\" : sender}\n            </Text>\n            <Text\n              style={{\n                flex: 1,\n                textAlign: \"right\",\n                fontFamily: \"AppNormal\",\n                fontSize: 12,\n                color: \"yellow\",\n              }}\n            >\n              {sendingTime?.split(\"T\")[1].split(\".\")[0]}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default ListMeassges;\n"]},"metadata":{},"sourceType":"module"}